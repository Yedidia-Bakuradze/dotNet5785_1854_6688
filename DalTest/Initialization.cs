
namespace DalTest;

using Dal;
using DalApi;
using DO;
using System;
using System.Data;
using System.Reflection.Metadata.Ecma335;

static public class Initialization
{
    private static IAssignment? s_dalAssignment;
    private static ICall? s_dalCall;
    private static IVolunteer? s_dalVolunteer;
    private static IConfig? s_dalConfig;

    private static readonly Random s_rand = new();

    //Be aware that the dummy data has been generated by AI !!!
    static string[] names = new string[] {
    "John Smith", "Jane Doe", "Michael Johnson", "Emily Davis", "David Brown",
    "Sarah Wilson", "James Jones", "Jessica Garcia", "Robert Miller", "Mary Martinez",
    "William Anderson", "Linda Taylor", "Richard Thomas", "Barbara Hernandez", "Joseph Moore",
    "Susan Martin", "Charles Jackson", "Margaret Thompson", "Christopher White", "Patricia Harris",
    "Daniel Lewis", "Jennifer Clark", "Matthew Robinson", "Elizabeth Walker", "Anthony Hall",
    "Karen Allen", "Mark Young", "Nancy King", "Paul Wright", "Betty Scott",
    "Steven Green", "Sandra Adams", "Andrew Baker", "Ashley Gonzalez", "Joshua Nelson",
    "Kimberly Carter", "Kevin Mitchell", "Donna Perez", "Brian Roberts", "Carol Turner",
    "Edward Phillips", "Michelle Campbell", "Ronald Parker", "Amanda Evans", "Timothy Edwards",
    "Melissa Collins", "Jason Stewart", "Deborah Sanchez", "Jeffrey Morris", "Stephanie Rogers",
    "Ryan Reed", "Rebecca Cook", "Jacob Morgan", "Laura Bell", "Gary Murphy",
    "Sharon Bailey", "Nicholas Rivera", "Cynthia Cooper", "Eric Richardson", "Kathleen Cox",
    "Stephen Howard", "Amy Ward", "Jonathan Torres", "Angela Peterson", "Larry Gray",
    "Helen Ramirez", "Scott James", "Anna Watson", "Frank Brooks", "Ruth Kelly",
    "Justin Sanders", "Brenda Price", "Brandon Bennett", "Pamela Wood", "Samuel Barnes",
    "Nicole Ross", "Gregory Henderson", "Katherine Coleman", "Benjamin Jenkins", "Christine Perry",
    "Patrick Powell", "Samantha Long", "Raymond Patterson", "Janet Hughes", "Jack Flores",
    "Maria Washington", "Dennis Butler", "Heather Simmons", "Jerry Foster", "Diane Gonzales",
    "Tyler Bryant", "Rachel Alexander", "Aaron Russell", "Catherine Griffin", "Henry Diaz",
    "Julie Hayes", "Adam Myers", "Victoria Ford", "Nathan Hamilton", "Megan Graham"
};
    static string[] emails = new string[] {
    "john.smith@example.com", "jane.doe@example.com", "michael.johnson@example.com", "emily.davis@example.com", "david.brown@example.com",
    "sarah.wilson@example.com", "james.jones@example.com", "jessica.garcia@example.com", "robert.miller@example.com", "mary.martinez@example.com",
    "william.anderson@example.com", "linda.taylor@example.com", "richard.thomas@example.com", "barbara.hernandez@example.com", "joseph.moore@example.com",
    "susan.martin@example.com", "charles.jackson@example.com", "margaret.thompson@example.com", "christopher.white@example.com", "patricia.harris@example.com",
    "daniel.lewis@example.com", "jennifer.clark@example.com", "matthew.robinson@example.com", "elizabeth.walker@example.com", "anthony.hall@example.com",
    "karen.allen@example.com", "mark.young@example.com", "nancy.king@example.com", "paul.wright@example.com", "betty.scott@example.com",
    "steven.green@example.com", "sandra.adams@example.com", "andrew.baker@example.com", "ashley.gonzalez@example.com", "joshua.nelson@example.com",
    "kimberly.carter@example.com", "kevin.mitchell@example.com", "donna.perez@example.com", "brian.roberts@example.com", "carol.turner@example.com",
    "edward.phillips@example.com", "michelle.campbell@example.com", "ronald.parker@example.com", "amanda.evans@example.com", "timothy.edwards@example.com",
    "melissa.collins@example.com", "jason.stewart@example.com", "deborah.sanchez@example.com", "jeffrey.morris@example.com", "stephanie.rogers@example.com",
    "ryan.reed@example.com", "rebecca.cook@example.com", "jacob.morgan@example.com", "laura.bell@example.com", "gary.murphy@example.com",
    "sharon.bailey@example.com", "nicholas.rivera@example.com", "cynthia.cooper@example.com", "eric.richardson@example.com", "kathleen.cox@example.com",
    "stephen.howard@example.com", "amy.ward@example.com", "jonathan.torres@example.com", "angela.peterson@example.com", "larry.gray@example.com",
    "helen.ramirez@example.com", "scott.james@example.com", "anna.watson@example.com", "frank.brooks@example.com", "ruth.kelly@example.com",
    "justin.sanders@example.com", "brenda.price@example.com", "brandon.bennett@example.com", "pamela.wood@example.com", "samuel.barnes@example.com",
    "nicole.ross@example.com", "gregory.henderson@example.com", "katherine.coleman@example.com", "benjamin.jenkins@example.com", "christine.perry@example.com",
    "patrick.powell@example.com", "samantha.long@example.com", "raymond.patterson@example.com", "janet.hughes@example.com", "jack.flores@example.com",
    "maria.washington@example.com", "dennis.butler@example.com", "heather.simmons@example.com", "jerry.foster@example.com", "diane.gonzales@example.com",
    "tyler.bryant@example.com", "rachel.alexander@example.com", "aaron.russell@example.com", "catherine.griffin@example.com", "henry.diaz@example.com",
    "julie.hayes@example.com", "adam.myers@example.com", "victoria.ford@example.com", "nathan.hamilton@example.com", "megan.graham@example.com"
};
    static string[] addresses = [
        "1 Rothschild Blvd, Tel Aviv",
        "2 Herzl St, Tel Aviv",
        "3 Dizengoff St, Tel Aviv",
        "4 Ibn Gabirol St, Tel Aviv",
        "5 Allenby St, Tel Aviv",
        "6 King George St, Tel Aviv",
        "7 Ben Yehuda St, Tel Aviv",
        "8 Jabotinsky St, Tel Aviv",
        "9 Arlozorov St, Tel Aviv",
        "10 Bograshov St, Tel Aviv",
        "11 Frishman St, Tel Aviv",
        "12 Gordon St, Tel Aviv",
        "13 Hayarkon St, Tel Aviv",
        "14 Basel St, Tel Aviv",
        "15 Yehuda Halevi St, Tel Aviv",
        "16 Nahalat Binyamin St, Tel Aviv",
        "17 Lilienblum St, Tel Aviv",
        "18 Montefiore St, Tel Aviv",
        "19 Shabazi St, Tel Aviv",
        "20 Florentin St, Tel Aviv",
        "21 Levinsky St, Tel Aviv",
        "22 Menachem Begin Rd, Tel Aviv",
        "23 Kaplan St, Tel Aviv",
        "24 Hahashmonaim St, Tel Aviv",
        "25 Carlebach St, Tel Aviv",
        "26 Yigal Alon St, Tel Aviv",
        "27 HaMasger St, Tel Aviv",
        "28 Derech Hashalom, Tel Aviv",
        "29 Namir Rd, Tel Aviv",
        "30 Weizmann St, Tel Aviv",
        "31 Shaul Hamelech Blvd, Tel Aviv",
        "32 Yehuda Maccabi St, Tel Aviv",
        "33 Pinkas St, Tel Aviv",
        "34 Nordau Blvd, Tel Aviv",
        "35 Ben Gurion Blvd, Tel Aviv",
        "36 Dizengoff Square, Tel Aviv",
        "37 Rabin Square, Tel Aviv",
        "38 Haneviim St, Jerusalem",
        "39 Jaffa St, Jerusalem",
        "40 King David St, Jerusalem",
        "41 Agron St, Jerusalem",
        "42 Ben Yehuda St, Jerusalem",
        "43 Hillel St, Jerusalem",
        "44 Shlomzion Hamalka St, Jerusalem",
        "45 Keren Hayesod St, Jerusalem",
        "46 Emek Refaim St, Jerusalem",
        "47 Derech Hebron, Jerusalem",
        "48 Derech Beit Lehem, Jerusalem",
        "49 HaPalmach St, Jerusalem",
        "50 Gaza St, Jerusalem",
        "51 HaNasi St, Jerusalem",
        "52 HaRav Kook St, Jerusalem",
        "53 HaNeviim St, Jerusalem",
        "54 HaTzvi St, Jerusalem",
        "55 HaRav Herzog St, Jerusalem",
        "56 HaRav Shmuel Baruch St, Jerusalem",
        "57 HaRav Uziel St, Jerusalem",
        "58 HaRav Kook St, Jerusalem"
    ];
    static double[] longitude = new[]
    {
        34.768982,
        34.7697593,
        34.7814586,
        34.7820896,
        34.76603619999999,
        34.7718028,
        34.7680766,
        34.8040512,
        34.7726748,
        34.7686239,
        34.7690543,
        34.7696267,
        34.7644323,
        34.7769711,
        34.7694594,
        34.7700182,
        34.7695263,
        34.7709599,
        34.7645904,
        34.7688602,
        34.769547,
        34.829074,
        34.7867818,
        34.7755696,
        34.7829257,
        34.7918923,
        34.7856299,
        34.80091110000001,
        34.7940383,
        34.789916,
        34.7891321,
        34.7897246,
        34.7878395,
        34.7764528,
        34.7733411,
        34.777208,
        34.7806198,
        35.2237081,
        35.2199263,
        35.2225549,
        35.2217815,
        35.2144516,
        35.2210645,
        35.2225216,
        35.222138,
        35.2181137,
        35.2256433,
        35.2225398,
        35.2086231,
        35.2123937,
        35.2147285,
        35.2208625,
        35.2183468,
        35.21371,
        35.2049358,
        35.207501,
        35.1862849,
        35.2208625,
    };
    static double[] latitude = new[] {
        32.0631703,
32.0633922,
32.0734225,
32.0717615,
32.0735939,
32.0704183,
32.073845,
32.0826326,
32.0876283,
32.0774401,
32.0800026,
32.0824454,
32.0693901,
32.0900797,
32.0614968,
32.0678115,
32.0621853,
32.0648623,
32.0620528,
32.0561926,
32.0596808,
32.092415,
32.0740448,
32.0713059,
32.0682887,
32.05538,
32.0641254,
32.0702864,
32.081776,
32.0845697,
32.0774985,
32.0937031,
32.0911246,
32.0922064,
32.0848172,
32.0746924,
32.0804846,
31.7840593,
31.7818041,
31.772227,
31.7776993,
31.7809509,
31.7795006,
31.7589424,
31.7720844,
31.7625537,
31.7647235,
31.7613369,
31.7648161,
31.771597,
31.7706183,
31.7836425,
31.7842721,
31.768319,
31.76713269999999,
31.786309,
31.7682148,
31.7836425,
    };
    static List<int> ids = new List<int>{
    123456789, 234567890, 345678901, 456789012, 567890123,
    678901234, 789012345, 890123456, 901234567, 112345678,
    223456789, 334567890, 445678901, 556789012, 667890123,
    778901234, 889012345, 990123456, 101234567, 212345678,
    323456789, 434567890, 545678901, 656789012, 767890123,
    878901234, 989012345, 100123456, 211234567, 322345678,
    433456789, 544567890, 655678901, 766789012, 877890123,
    988901234, 109012345, 210123456, 321234567, 432345678,
    543456789, 654567890, 765678901, 876789012, 987890123,
    109901234, 210012345, 321123456, 432234567, 543345678,
    654456789, 765567890, 876678901, 987789012, 109890123,
    210901234, 321012345, 432123456, 543234567, 654345678,
    765456789, 876567890, 987678901, 109789012, 210890123,
    321901234, 432012345, 543123456, 654234567, 765345678,
    876456789, 987567890, 109678901, 210789012, 321890123,
    432901234, 543012345, 654123456, 765234567, 876345678,
    987456789, 109567890, 210678901, 321789012, 432890123,
    543901234, 654012345, 765123456, 876234567, 987345678,
    109456789, 210567890, 321678901, 432789012, 543890123
};
    static string[] phoneNumbers = new string[] {
    "050-1234567", "050-2345678", "050-3456789", "050-4567890", "050-5678901",
    "050-6789012", "050-7890123", "050-8901234", "050-9012345", "050-0123456",
    "052-1234567", "052-2345678", "052-3456789", "052-4567890", "052-5678901",
    "052-6789012", "052-7890123", "052-8901234", "052-9012345", "052-0123456",
    "053-1234567", "053-2345678", "053-3456789", "053-4567890", "053-5678901",
    "053-6789012", "053-7890123", "053-8901234", "053-9012345", "053-0123456",
    "054-1234567", "054-2345678", "054-3456789", "054-4567890", "054-5678901",
    "054-6789012", "054-7890123", "054-8901234", "054-9012345", "054-0123456",
    "055-1234567", "055-2345678", "055-3456789", "055-4567890", "055-5678901",
    "055-6789012", "055-7890123", "055-8901234", "055-9012345", "055-0123456",
    "056-1234567", "056-2345678", "056-3456789", "056-4567890", "056-5678901",
    "056-6789012", "056-7890123", "056-8901234", "056-9012345", "056-0123456",
    "057-1234567", "057-2345678", "057-3456789", "057-4567890", "057-5678901",
    "057-6789012", "057-7890123", "057-8901234", "057-9012345", "057-0123456",
    "058-1234567", "058-2345678", "058-3456789", "058-4567890", "058-5678901",
    "058-6789012", "058-7890123", "058-8901234", "058-9012345", "058-0123456",
    "059-1234567", "059-2345678", "059-3456789", "059-4567890", "059-5678901",
    "059-6789012", "059-7890123", "059-8901234", "059-9012345", "059-0123456",
    "050-1111111", "050-2222222", "050-3333333", "050-4444444", "050-5555555",
    "050-6666666", "050-7777777", "050-8888888", "050-9999999", "050-0000000"
};
    static string[] passwords = new string[] {
    "P@ssw0rd123", "Qwerty!234", "A1b2C3d4E5", "Zxcvbnm!23", "Passw0rd!@#",
    "SecureP@ss1", "MyP@ssw0rd2", "Admin!23456", "UserP@ss789", "Login!@#123",
    "P@ssword!23", "Qwerty!@#45", "A1b2C3!@#4", "Zxcvbn!@#56", "Pass!@#7890",
    "Secure!@#123", "MyP@ss!@#45", "Admin!@#678", "User!@#9012", "Login!@#345",
    "P@ssw0rd!@#", "Qwerty!@#67", "A1b2C3!@#8", "Zxcvbn!@#90", "Pass!@#1234",
    "Secure!@#567", "MyP@ss!@#89", "Admin!@#012", "User!@#3456", "Login!@#789",
    "P@ssw0rd!@#1", "Qwerty!@#23", "A1b2C3!@#4", "Zxcvbn!@#56", "Pass!@#7890",
    "Secure!@#123", "MyP@ss!@#45", "Admin!@#678", "User!@#9012", "Login!@#345",
    "P@ssw0rd!@#2", "Qwerty!@#34", "A1b2C3!@#5", "Zxcvbn!@#67", "Pass!@#8901",
    "Secure!@#234", "MyP@ss!@#56", "Admin!@#789", "User!@#0123", "Login!@#456",
    "P@ssw0rd!@#3", "Qwerty!@#45", "A1b2C3!@#6", "Zxcvbn!@#78", "Pass!@#9012",
    "Secure!@#345", "MyP@ss!@#67", "Admin!@#890", "User!@#1234", "Login!@#567",
    "P@ssw0rd!@#4", "Qwerty!@#56", "A1b2C3!@#7", "Zxcvbn!@#89", "Pass!@#0123",
    "Secure!@#456", "MyP@ss!@#78", "Admin!@#901", "User!@#2345", "Login!@#678",
    "P@ssw0rd!@#5", "Qwerty!@#67", "A1b2C3!@#8", "Zxcvbn!@#90", "Pass!@#1234",
    "Secure!@#567", "MyP@ss!@#89", "Admin!@#012", "User!@#3456", "Login!@#789",
    "P@ssw0rd!@#6", "Qwerty!@#78", "A1b2C3!@#9", "Zxcvbn!@#01", "Pass!@#2345",
    "Secure!@#678", "MyP@ss!@#90", "Admin!@#123", "User!@#4567", "Login!@#890"
};
    static string[] descriptions = new string[] {
        "Request for food delivery",
        "Inquiry about volunteering opportunities",
        "Donation of food items",
        "Request for emergency food assistance",
        "Follow-up on previous food request",
        "Information about food distribution schedule",
        "Request for special dietary needs",
        "Report of missing food delivery",
        "Request for additional food supplies",
        "Feedback on food quality and service",
    };

    //The calls:
    //0-19 : No assignment
    //20-29: Expired
    //30-99: Regular

    //The Volunteers:
    //0-19 : No calls been taken
    //20-29: Took 2 Calls
    //30-69: Took 5 Calls
    //70-99: Took 7 Calls

    //Order of initialization: Volunteers >> Calls >> Assignments

    /// <summary>
    /// Creates Assignment's instances for the db
    /// </summary>
    /// <exception cref="Exception">Throws an exception if the calls database hasn't been generated</exception>
    private static void CreateAssignments()
    {
        //Gets dbs
        List<Call> listOfCalls = s_dalCall?.ReadAll()
             ?? throw new Exception("List of Calls hasn't been generated yet");
        List<Volunteer> listOfVolunteers = s_dalVolunteer?.ReadAll()
            ?? throw new Exception("List of Volunteers hasn't been generated yet");

        Volunteer currentVolunteer;
        Call currentCall;
        
        //For each volunteer we would assign couple of calls to him
        for (int i = 20; i < 100; i++) {

            Console.WriteLine($"Assignment Number {i -20 + 1} has been created!");
            currentVolunteer = listOfVolunteers[i];
            currentCall = listOfCalls[i];
            
            //Calculates the delta time between the opening and closing time of the call    
            TimeSpan delta = (currentCall.DeadLine != null)
                ? (TimeSpan) (currentCall.DeadLine - currentCall.OpeningTime)
                : s_dalConfig!.Clock.AddDays(31) - currentCall.OpeningTime;

            //Sets the start and end date based on the delta time that has been calculated   
            DateTime start = currentCall.OpeningTime.AddDays(s_rand.Next(0,delta.Days));

            //Calculates the delta time between the selected start time and the closing time of the call
            delta = (currentCall.DeadLine != null)
                ? (TimeSpan)(currentCall.DeadLine - start)
                : s_dalConfig!.Clock.AddDays(31) - start;

            DateTime end = start.AddDays(s_rand.Next(0, delta.Days));

            //Creates the assignment object - the id is generated in the CRUD's create method so there is no need to provide one here 
            Assignment newAssignment = new()
            {
                Called = currentCall.Id,
                VolunteerId = currentVolunteer.Id,
                TimeOfStarting = start,
                TimeOfEnding = end,
                TypeOfEnding =
                (end > currentCall.DeadLine)
                ? TypeOfEnding.CancellationExpired
                : (i < 15) ? TypeOfEnding.SelfCanceled
                : (i < 30) ? TypeOfEnding.AdminCanceled
                : TypeOfEnding.Treated
            };
            try
            {
                s_dalAssignment?.Create(newAssignment);
            }catch(Exception error)
            {
                Console.WriteLine(error.Message);
            }
        }
    }
    /// <summary>
    /// Creates new dummy Call instances for the database
    /// </summary>
    private static void CreateCalls()
    {
        for (int i = 0;i < 100;i++)
        {
            Console.WriteLine($"Call Number {i+1} has been created!");
            DateTime start = s_dalConfig!.Clock.AddDays(s_rand.Next(-31, -5));
            int deltaDays = (s_dalConfig!.Clock - start).Days;
            int position = s_rand.Next(0, addresses.Length-1);
            DateTime end = (i < 30 && i >= 20)
                ? start.AddDays(s_rand.Next(1, deltaDays)) // Expired
                : start.AddDays(s_rand.Next(deltaDays, 31)); // Still open

            //New call instance
            Call newCall = new Call
            {
                Id = -1, //A dummy id, it would be replaced with a proper id in the CRUD method
                Type = (s_rand.Next(0,1) == 0) ? CallTypes.FoodDelivery : CallTypes.FoodPreparation,
                FullAddressCall = addresses[position],
                Latitude = latitude[position],
                Longitude = longitude[position],
                OpeningTime = start,
                Description = descriptions[i%10],
                DeadLine = end
            };
            try
            {
                s_dalCall?.Create(newCall);
            }catch(Exception error)
            {
                Console.WriteLine(error.Message);
            }
        }
    }
    /// <summary>
    /// Creates new dummy Volunteer instances for the database
    /// </summary>
    private static void CreateVolunteers()
    {
        for (int i = 0; i < 100; i++)
        {
            Console.WriteLine($"Volunteer Number {i+1} has been created!");
            Volunteer newVolunteer = new Volunteer
            {
                Id = (ids.Count >=1)
                ? ids[s_rand.Next(0, ids.Count-1)]
                : s_rand.Next(200000000, 400000000),
                Role = (i == 0) ? Roles.Admin : Roles.Volunteer,
                FullName = names[i],
                PhoneNumber = phoneNumbers[i],
                Email = emails[i],
                MaxDistanceToCall = s_rand.Next(1,30),
                TypeOfRange = TypeOfRange.AirDistance,
                Active = (i == 76) ? false : true,
                Password = passwords[i % (passwords.Length-1)],
                FullCurrentAddress = addresses[i % (addresses.Length-1)],
                Latitude = latitude[i % (latitude.Length-1)],
                Longitude = longitude[i % (longitude.Length-1)]
            };
            if(ids.Count > 0) { 
                ids.Remove(newVolunteer.Id);
            }
            try
            {
                s_dalVolunteer?.Create(newVolunteer);
            }catch(Exception error)
            {
                Console.WriteLine(error.Message);
            }
        }

    }

    /// <summary>
    /// This method initializes the local database with dummy data using the provided interfaces
    /// </summary>
    /// <param name="dalAssignment">The assignments implementation interfaces</param>
    /// <param name="dalCall"></param>
    /// <param name="dalVolunteer"></param>
    /// <param name="dalConfig"></param>
    /// <exception cref="NullReferenceException"></exception>
    public static void Do(IAssignment? dalAssignment, ICall? dalCall, IVolunteer? dalVolunteer, IConfig? dalConfig)
    {
        //Assignment of the interfaces
        s_dalAssignment = dalAssignment ?? throw new NullReferenceException("DAL object can not be null!");
        s_dalCall = dalCall ?? throw new NullReferenceException("DAL object can not be null!");
        s_dalVolunteer = dalVolunteer ?? throw new NullReferenceException("DAL object can not be null!");
        s_dalConfig = dalConfig ?? throw new NullReferenceException("DAL object can not be null!");
        
        //Resetting the system
        Console.WriteLine("Reset Configuration values and List values...");
        s_dalConfig.Reset(); 
        s_dalAssignment.DeleteAll(); 
        s_dalCall.DeleteAll(); 
        s_dalVolunteer.DeleteAll(); 
        Console.WriteLine("Initializing Db list ...");

        //Initialization the db
        CreateVolunteers();
        CreateCalls();
        CreateAssignments();
    }

}
